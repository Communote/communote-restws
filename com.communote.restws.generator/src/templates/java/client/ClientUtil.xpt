«IMPORT restWebservice»

«EXTENSION templates::java::client::ClientExtension»
«EXTENSION templates::Extensions»

«REM»
	This template writes out all the configuration and helper files 
«ENDREM»
«DEFINE util(APIVersion currentVersion) FOR RestWebservice-»
«REM»
	This section will create the illegal request parameter exception
«ENDREM»	
	«FILE getUtilPath((APIVersion)currentVersion) + "/" + "PageableList.java"-»
package «getUtilPath((APIVersion)currentVersion).replaceAll("/",".")»;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

/**
 * A list wrapper with additional attributes which state whether there are more elements if the list
 * represents subset of a larger data-set. This is for instance useful if the list holds only a
 * range of the results of a database query.
 * 
 * @param <E>
 *            The type of the list
 */
public class PageableList<E> implements List<E> {

    private int numberOfElements = -1;

    private boolean moreElementsAvailable = false;

    private final List<E> list;

    /**
     * Create a list wrapping the given list
     * 
     * @param myCollection
     *            the actual list to wrap
     */
    public PageableList(Collection<E> myCollection) {
        this.list = new ArrayList<E>(myCollection);
    }

    /**
     * Create a list wrapping the given list
     * 
     * @param myList
     *            the actual list to wrap
     */
    public PageableList(List<E> myList) {
        this.list = myList;
    }

    /**
     * Create a list wrapping the given list
     * 
     * @param myList
     *            the actual list to wrap
     * @param numberOfElements
     *            all found elements
     * @param moreElementsAvailable
     *            are there more elements available
     */
    public PageableList(List<E> myList, int numberOfElements, boolean moreElementsAvailable) {
        this.list = myList;
        this.numberOfElements = numberOfElements;
        this.moreElementsAvailable = moreElementsAvailable;
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public boolean add(E e) {
        return list.add(e);
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public void add(int index, E element) {
        list.add(index, element);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean addAll(Collection<? extends E> c) {
        return list.addAll(c);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean addAll(int index, Collection<? extends E> c) {
        return list.addAll(index, c);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void clear() {
        list.clear();
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public boolean contains(Object o) {
        return list.contains(o);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean containsAll(Collection<?> c) {
        return list.containsAll(c);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public E get(int index) {
        return list.get(index);
    }

    public List<E> getList() {
        return list;
    }

    /**
     * Getting that there more elements.
     * 
     * @return true if there are more elements.
     * 
     */
    public boolean getMoreElementsAvailable() {
        return moreElementsAvailable;
    }

    /**
     * Getting the number of all found elements. Number of elements is -1 when metaData is empty.
     * 
     * @return number of elements
     */
    public int getNumberOfElements() {
        return numberOfElements;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int indexOf(Object o) {
        return list.indexOf(o);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isEmpty() {
        return list.isEmpty();
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public Iterator<E> iterator() {
        return list.iterator();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int lastIndexOf(Object o) {
        return list.lastIndexOf(o);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ListIterator<E> listIterator() {
        return list.listIterator();
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public ListIterator<E> listIterator(int index) {
        return list.listIterator(index);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public E remove(int index) {
        return list.remove(index);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(Object o) {
        return list.remove(o);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean removeAll(Collection<?> c) {
        return list.removeAll(c);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean retainAll(Collection<?> c) {
        return list.retainAll(c);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public E set(int index, E element) {
        return list.set(index, element);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int size() {
        return list.size();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<E> subList(int fromIndex, int toIndex) {
        return list.subList(fromIndex, toIndex);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object[] toArray() {
        return list.toArray();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <T> T[] toArray(T[] a) {
        return list.toArray(a);
    }
}


	«ENDFILE»
«ENDDEFINE»