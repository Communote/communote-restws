«IMPORT restWebservice»

«EXTENSION templates::java::server::ServerExtentions»
«EXTENSION templates::Extensions»

«REM»
	This template creates a file for a single resource class
«ENDREM»
«DEFINE singleresource (APIVersion currentVersion, List mimeType, String parentPath, String filePath) FOR Resource-»
		«REM»get the file path«ENDREM»	
	«FILE getFilePath((APIVersion)currentVersion,"","Resource",this, filePath) »
/**
* This class was generated by the REST web service DSL
*
* «this.doc.description»
*
*@author: generated source 
*
**/

package «getPackagePath((APIVersion)currentVersion,filePath)»;
 
import javax.ws.rs.HeaderParam;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import org.codehaus.jackson.annotate.JsonIgnore;

import «getAppPath((APIVersion)currentVersion).replaceAll("/",".")».AbstractResource;
import «getResourcePath((APIVersion)currentVersion).replaceAll("/",".")»AbstractResourceHandler;
import «getResourcePath((APIVersion)currentVersion).replaceAll("/",".")»DefaultParameter;
import «getAppPath((APIVersion)currentVersion).replaceAll("/",".")».ResourceHandlerLocator;
 
@Path("«parentPath»")
public class «this.name»Resource extends AbstractResource{
	«REM»Save the version group for the current selected version to a variable«ENDREM»
  «LET getVersionGroupByVersion(this.versionGroups, currentVersion) AS currentVersionGroup-»
    
	«REM»Generate equals() and hashCode() methods for Java.«ENDREM»
	/* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        «FOREACH currentVersionGroup.refAttributes AS singleAttribute-»
        	«IF singleAttribute.type.datatype.toString().matches("long") && !singleAttribute.type.isArray-»
        result = prime * result + ((«singleAttribute.name.toFirstLower()» == null) ? 0 : «singleAttribute.name.toFirstLower()».hashCode());
        	«ENDIF-»
        «ENDFOREACH-»
        return result;
    }
    
	/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof «this.name»Resource))
            return false;
        «this.name»Resource other = («this.name»Resource) obj;
        «FOREACH currentVersionGroup.refAttributes AS singleAttribute-»
        	«IF singleAttribute.type.datatype.toString().matches("long") && !singleAttribute.type.isArray-»
        if («singleAttribute.name.toFirstLower()» == null) {
            if (other.«singleAttribute.name.toFirstLower()» != null)
                return false;
        } else if (!«singleAttribute.name.toFirstLower()».equals(other.«singleAttribute.name.toFirstLower()»))
            return false;
            «ENDIF-»
        «ENDFOREACH-»
        return true;
    }
    
    «REM»Iterate over all attributes refered within the version group«ENDREM»
	«FOREACH currentVersionGroup.refAttributes AS singleAttribute-»
	/**
	*	«singleAttribute.content.doc.description»
	**/
	«IF singleAttribute.content.parameterConstants.isEmpty»
	«IF this.subResources.select(sR|sR.name == singleAttribute.type.resourcetype.name).size > 0 »
		private «EXPAND templates::java::server::ServerCommon::datatypeMapper(currentVersion, getPackageOfResourceAttribute(filePath,singleAttribute)) FOR singleAttribute.type-» «singleAttribute.name-»;
	«ELSE»
		private «EXPAND templates::java::server::ServerCommon::datatypeMapper(currentVersion, singleAttribute.type.resourcetype.name.toLowerCase()) FOR singleAttribute.type-» «singleAttribute.name-»;
	«ENDIF»
	«ELSEIF singleAttribute.type.isArray && singleAttribute.type.datatype.toString().toLowerCase() == "string"»
	private java.util.List<E«singleAttribute.name.toFirstUpper()»> «singleAttribute.name.toFirstLower()»;
	«EXPAND generateenums(currentVersion, this, filePath) FOR singleAttribute»
	«ELSE»
	private E«singleAttribute.name.toFirstUpper()» «singleAttribute.name-»;
	«EXPAND generateenums(currentVersion, this, filePath) FOR singleAttribute»
	«ENDIF»
		
	«ENDFOREACH»
	
	«FOREACH currentVersionGroup.refParameter AS singleParameter-»
		«EXPAND generateenums(currentVersion, this, filePath) FOR singleParameter-»
	«ENDFOREACH-»
	
	/**
	*	The uriInfo is used to retrieve parameter from a request as well as URI information
	**/
	@Context UriInfo uriInfo;
	
	/**
    * 	Request 
    **/
    @Context
    Request request;
    
	/**
	*	The requested mime type is send with the accept header of the request and will be stored in this variable	
	**/
	@HeaderParam("Accept") String requestedMimeType;
	
	/**
	*	Because of missing implementation in JAX-RS the id of the session is put into a separate header field and accessible through this variable 	
	*/
	@HeaderParam("requestSessionId") String requestSessionId;
	
	
	«EXPAND createAbstractResourceHandler(currentVersion) FOR this-»
	
	«REM»If the resource id has the http method GET this method for a requesting a single resource will be generated«ENDREM»
	«IF hasMethod(this.resourceId.first(), (Method)Method.getStaticProperty("GET").get())-»
	@javax.ws.rs.GET
	@Path("{«this.resourceId.first().name»}")
	/**
	*	This method handles the GET requests coming to the web service. 
	*   @params «this.resourceId.first().name» - «((AbstractParameterAttribute)this.resourceId.first()).content.doc.description»
	*	@return Response - The status code and the http message that is send back to the client
	*/
	public Response «this.name.toFirstLower()-»Single(«EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId-») throws Exception  {
		return getResourceHandler().handleGet(new Get«this.name»Parameter(uriInfo.getQueryParameters(true),«EXPAND getPathParamsAsMethodParams FOR this.resourceId-»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	«ENDIF»
	
	«REM»If the resource id has the http method DELETE this method for a requesting a single resource will be generated«ENDREM»
	«IF hasMethod(this.resourceId.first(), (Method)Method.getStaticProperty("DELETE").get())»
	@javax.ws.rs.DELETE
	@Path("{«this.resourceId.first().name»}")
	/**
	*	This method handles the DELETE requests coming to the web service. 
	*   @params «this.resourceId.first().name» - «((AbstractParameterAttribute)this.resourceId.first()).content.doc.description»
	*	@return Response - The status code and the http message that is send back to the client
	*/
	public Response delete«this.name»(MultivaluedMap<String, String> params, «EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId-») throws Exception {
		return getResourceHandler().handleDelete(new Delete«this.name»Parameter(params, «EXPAND getPathParamsAsMethodParams FOR this.resourceId-»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	«ENDIF»
	
	«REM»If the resource id has the http method PUT this method for a requesting a single resource will be generated«ENDREM»
	«IF hasMethod(this.resourceId.first(), (Method)Method.getStaticProperty("PUT").get())»
	@javax.ws.rs.PUT
	@Path("{«this.resourceId.first().name»}")
	/**
	*	This method handles the PUT requests coming to the web service. 
	*	@parmas params - map that contains all parameter sent with the web service request
	*   @params «this.resourceId.first().name» - «((AbstractParameterAttribute)this.resourceId.first()).content.doc.description»
	*	@return Response - The status code and the http message that is send back to the client
	*/
	public Response edit«this.name»(MultivaluedMap<String, String> params, «EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId-») throws Exception {
		return getResourceHandler().handleEdit(new Edit«this.name»Parameter(params, «EXPAND getPathParamsAsMethodParams FOR this.resourceId-»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	
	
	@javax.ws.rs.PUT
	@Path("{«this.resourceId.first().name»}")
	@javax.ws.rs.Consumes( MediaType.APPLICATION_JSON )
	/**
	*	This method handles the PUT requests coming to the web service. 
	*	@parmas params - map that contains all parameter sent with the web service request
	*   @params «this.resourceId.first().name» - «((AbstractParameterAttribute)this.resourceId.first()).content.doc.description»
	*	@return Response - The status code and the http message that is send back to the client
	*/
	public Response edit«this.name»(String jsonRepresentation, «EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId-») throws Exception {
		return getResourceHandler().handleEdit(new Edit«this.name»Parameter(jsonRepresentation, «EXPAND getPathParamsAsMethodParams FOR this.resourceId-»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	
	«ENDIF»
	
	«REM»If the resource id has the http method LIST this method for a requesting a single resource will be generated«ENDREM»
	«IF  isCreationAvailable(currentVersion, this, (Method)Method.getStaticProperty("GET_COLLECTION").get())»
	@javax.ws.rs.GET
	/**
	*	This method handles the LIST requests coming to the web service. 
	*   @params «EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId.withoutFirst()»
	*	@return Response - The status code and the http message that is send back to the client
	*/
	public Response «this.name.toFirstLower()»List(«EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId.withoutFirst()-») throws Exception {
		if(uriInfo == null){return null;} //is needed otherwise the jackson parser will throw a NullPointerException
		return getResourceHandler().handleList(new GetCollection«this.name»Parameter(uriInfo.getQueryParameters(true)
		«IF this.resourceId.withoutFirst().size > 0»,«EXPAND getPathParamsAsMethodParams FOR this.resourceId.withoutFirst()-»«ENDIF»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	«ENDIF»
	
	«REM»If the resource id has the http method POST this method for a requesting a single resource will be generated«ENDREM»
	«IF isCreationAvailable(currentVersion, this, (Method)Method.getStaticProperty("POST").get())»
	
	@javax.ws.rs.POST
	/**
	*	This method handles the POST requests coming to the web service. 
	*	@parmas params - map that contains all parameter sent with the web service request
	*   @params «EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId.withoutFirst()»
	*	@return Response - The status code and the http message that is send back to the client
	**/
	public Response create«this.name»(MultivaluedMap<String, String> params«IF this.resourceId.withoutFirst().size > 0»,«EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId.withoutFirst()-»«ENDIF») throws Exception {
		return getResourceHandler().handleCreate(new Create«this.name»Parameter(params
		«IF this.resourceId.withoutFirst().size > 0»,«EXPAND getPathParamsAsMethodParams FOR this.resourceId.withoutFirst()-»«ENDIF»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	
	@javax.ws.rs.POST
    @javax.ws.rs.Consumes( MediaType.APPLICATION_JSON )
	/**
	*	This method handles the POST requests coming to the web service. 
	*	@parmas params - map that contains all parameter sent with the web sermvn vice request
	*   @params «EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId.withoutFirst()»
	*	@return Response - The status code and the http message that is send back to the client
	*/
	public Response create«this.name»(String jsonRepresentation«IF this.resourceId.withoutFirst().size > 0»,«EXPAND getPathParams(currentVersion, filePath) FOR this.resourceId.withoutFirst()-»«ENDIF») throws Exception {
		return getResourceHandler().handleCreate(new Create«this.name»Parameter(jsonRepresentation«IF this.resourceId.withoutFirst().size > 0»,«EXPAND getPathParamsAsMethodParams FOR this.resourceId.withoutFirst()-»«ENDIF»), requestedMimeType, uriInfo, requestSessionId, request);
	}
	
	«IF this.contenttypes.exists(e|e.toString() == "multipart/form-data") && this.contenttypes.exists(e|e.toString() == "application/octet-stream") »
	
	@javax.ws.rs.POST
	@javax.ws.rs.Consumes({ MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_OCTET_STREAM })
	/**
     *  This method handles the POST requests, containing attachments, that coms to the web service. 
     *  @return Response The status code and the http message that is send back to the client
     */
	public Response create«this.name»() throws Exception {
		return getResourceHandler().handleCreate(null, requestedMimeType, uriInfo, requestSessionId, request);
	}
	
	«ENDIF»
	
	«ENDIF»
	
	«FOREACH currentVersionGroup.refAttributes AS singleAttribute-»
		«IF this.subResources.select(sR|sR.name == singleAttribute.type.resourcetype.name).size > 0 »
		 	«EXPAND templates::java::server::ServerCommon::createGetter(currentVersion, getPackageOfResourceAttribute(filePath,singleAttribute)) FOR singleAttribute-»
			«EXPAND templates::java::server::ServerCommon::createSetter(currentVersion, getPackageOfResourceAttribute(filePath,singleAttribute)) FOR singleAttribute-»
		«ELSE»
			«EXPAND templates::java::server::ServerCommon::createGetter(currentVersion, singleAttribute.type.resourcetype.name.toLowerCase()) FOR singleAttribute-»
			«EXPAND templates::java::server::ServerCommon::createSetter(currentVersion, singleAttribute.type.resourcetype.name.toLowerCase()) FOR singleAttribute-»
		«ENDIF»
	«ENDFOREACH»
	
  «ENDLET»
}
		«ENDFILE»
«ENDDEFINE»

«DEFINE getPathParams (APIVersion currentVersion, String filePath) FOR List[AbstractParameterAttribute]-»
	«FOREACH this AS resourceId SEPARATOR ","-»
@PathParam("«resourceId.name»")
	«IF resourceId.content.parameterConstants.isEmpty-»
		«EXPAND templates::java::server::ServerCommon::datatypeMapper(currentVersion, filePath) FOR resourceId.type-» «resourceId.name-»
	«ELSE»
		E«resourceId.name.toFirstUpper()-» «resourceId.name.toFirstLower()-»
	«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE getPathParamsAsMethodParams FOR List[AbstractParameterAttribute]-»
	«FOREACH this AS resourceId SEPARATOR ","-»«resourceId.name-»«ENDFOREACH-»
«ENDDEFINE»

«REM»This template generattes a file with an enum for constant values of a certain parameter/attribute«ENDREM»
«DEFINE generateenums(APIVersion version, Resource res, String filePath) FOR AbstractParameterAttribute»
	«REM»check if a constant value exists«ENDREM»
	«IF this.content.parameterConstants.size > 0»
		«FILE getEnumFilePath((APIVersion)version,res,this, filePath)»
			package «getPackagePath((APIVersion)version, filePath)»;
			public enum E«this.name.toFirstUpper()»{
			«FOREACH this.content.parameterConstants AS const SEPARATOR ","»
				«const.value.toUpperCase()»
			«ENDFOREACH»
			}
		«ENDFILE»
	«ENDIF»
«ENDDEFINE»

«DEFINE createAbstractResourceHandler (APIVersion version) FOR Resource -»
	@Override
	/**
	 *	This method provides the access to the resource handler instance
	 *	@return The resource specific handler instance
	 **/
	protected AbstractResourceHandler<«EXPAND createAbstractResourceHandlerParameters(version)»> getResourceHandler() {
		return (AbstractResourceHandler<«EXPAND createAbstractResourceHandlerParameters(version)»>) ResourceHandlerLocator.getInstance().getResourceHandler(«this.name»Resource.class);
	}
«ENDDEFINE»


«DEFINE createAbstractResourceHandlerParameters(APIVersion version) FOR Resource -»
    «IF isCreationAvailable(version, this ,(Method)Method.getStaticProperty("POST").get())»Create«this.name»Parameter,«ELSE»DefaultParameter,«ENDIF»
	«IF hasMethod(this.resourceId.first(), (Method)Method.getStaticProperty("PUT").get())»Edit«this.name»Parameter,«ELSE»DefaultParameter,«ENDIF»
	«IF hasMethod(this.resourceId.first(), (Method)Method.getStaticProperty("DELETE").get())»Delete«this.name»Parameter,«ELSE»DefaultParameter,«ENDIF»
	«IF hasMethod(this.resourceId.first(), (Method)Method.getStaticProperty("GET").get())»Get«this.name»Parameter,«ELSE»DefaultParameter,«ENDIF»
	«IF isCreationAvailable(version, this ,(Method)Method.getStaticProperty("GET_COLLECTION").get())»GetCollection«this.name»Parameter«ELSE»DefaultParameter«ENDIF»
«ENDDEFINE»